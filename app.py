# app.py ‚Äî STT ‚Üí EMS Extractor (Streamlit end-to-end)
"""
EMS Speech-to-Text ‡πÑ‡∏ó‡∏¢ + EMS Extractor
‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: 2025 (pipeline integrated)
‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤: EMS Team
"""

import os
import time
import json
from datetime import datetime
from io import BytesIO
from pathlib import Path

import streamlit as st
import logging
from dotenv import load_dotenv

from speech_to_text import EMSSpeechToText
# reuse robust post-process + summary from friend's module
from ems_extract import normalize_after_llm, to_human_text

# OpenAI client (v1)
from openai import OpenAI

# -------------------------
# Streamlit page & styles
# -------------------------
st.set_page_config(
    page_title="EMS Speech-to-Text ‡πÑ‡∏ó‡∏¢ + Extractor",
    page_icon="üöë",
    layout="centered",
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- NEW STYLES ---
st.markdown("""
<style>
    /* General body styles */
    .stApp {
        background-color: #f0f2f6;
    }

    /* Main header with gradient */
    .main-header {
        background: linear-gradient(135deg, #5e72e4 0%, #825ee4 100%);
        padding: 1.5rem;
        border-radius: 12px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    .main-header h1 {
        font-size: 2rem;
        margin-bottom: 0.5rem;
    }

    /* Step headers for different sections */
    .step-header {
        background-color: #ffffff;
        padding: 0.8rem 1.2rem;
        border-radius: 10px;
        border-left: 5px solid #5e72e4;
        margin: 1.5rem 0 1rem 0;
        font-weight: bold;
        color: #32325d;
        font-size: 1.2rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    /* Result cards for displaying outputs */
    .result-card {
        background-color: #ffffff;
        padding: 1.2rem;
        border-radius: 10px;
        border: 1px solid #e6ebf1;
        margin-top: 1rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.07);
    }
    .result-card h4 {
        color: #5e72e4;
        margin-bottom: 0.75rem;
    }
    .result-card p {
        margin-bottom: 0.5rem;
    }
    
    /* Subtle text for hints or secondary info */
    .subtle {
        color: #525f7f;
        font-size: 0.9rem;
        margin-top: 1rem;
    }

    /* Custom button styles */
    .stButton>button {
        border-radius: 8px;
    }

    /* Expander styles */
    .stExpander {
        border-radius: 10px !important;
        border: 1px solid #e6ebf1 !important;
    }
</style>
""", unsafe_allow_html=True)


# -------------------------
# Session state initialization
# -------------------------
def init_session_state():
    """Initialize all session state variables"""
    if 'stt_client' not in st.session_state:
        st.session_state.stt_client = None
        st.session_state.is_initialized = False
    
    # STT results
    if 'stt_results' not in st.session_state:
        st.session_state.stt_results = None
        st.session_state.raw_transcript = ""
        st.session_state.processing_time = 0
    
    # EMS extraction results
    if 'ems_data' not in st.session_state:
        st.session_state.ems_data = None
        st.session_state.human_text = ""
    
    # Current uploaded file info
    if 'current_file_info' not in st.session_state:
        st.session_state.current_file_info = None

# -------------------------
# Helpers
# -------------------------
def initialize_stt_client():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Speech-to-Text client"""
    try:
        if st.session_state.stt_client is None:
            with st.spinner("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Cloud Speech-to-Text..."):
                st.session_state.stt_client = EMSSpeechToText()
                st.session_state.is_initialized = True
            st.success("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return True
    except Exception as e:
        st.error(f"‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}")
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ service account JSON (‡πÄ‡∏ä‡πà‡∏ô neon-*.json) ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô")
        return False


def build_system_prompt_for_ems() -> str:
    """‡∏¢‡∏Å system prompt ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÉ‡∏ô ems_extract.py ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô"""
    return (
        "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô EMS ‡πÑ‡∏ó‡∏¢/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© "
        "‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ö‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏î‡πâ"
        "‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏µ‡∏¢‡πå: "
        "{unit_id,timestamp,incident:{type,mechanism,location,safety_notes},"
        "patient:{id,age,gender,consciousness,chief_complaint},"
        "vital_signs:{bp,hr,rr,spo2,temp},"
        "assessment:{injuries,suspected_conditions,triage_level},"
        "interventions,logistics:{hospital_destination,eta_minutes,special_requests}} "
        "‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠ [] ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ JSON. "
        "‡∏Å‡∏é‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î: "
        "1) patient.id ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "
        "2) triage_level ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô {RED,YELLOW,GREEN} ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô "
        "3) ‡∏ñ‡πâ‡∏≤ unit_id ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏•‡πâ‡∏ß‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô 'EMS{‡πÄ‡∏•‡∏Ç}' ‡πÄ‡∏ä‡πà‡∏ô 112 -> EMS112 "
        "4) injuries ‡πÅ‡∏•‡∏∞ suspected_conditions: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£/‡πÇ‡∏£‡∏Ñ ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà ‡∏´‡πâ‡∏≤‡∏°‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á "
        "5) interventions ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ñ‡∏á‡∏ó‡∏µ‡πà: "
        "[\"intubation\",\"oxygen\",\"IV fluids\",\"defibrillation\",\"splint\","
        "\"cooling\",\"epinephrine IM\",\"diazepam IV\",\"nebulization\"] "
        "6) ‡∏ñ‡πâ‡∏≤ triage_level = RED ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà special_requests ‡πÄ‡∏ä‡πà‡∏ô "
        "[\"prepare ER\",\"alert trauma team\"] "
        "7) ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏¢‡∏≤‡∏ß‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå interventions ‡∏´‡∏£‡∏∑‡∏≠ triage "
        "‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏ï‡∏≤‡∏°‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô. "
        "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: incident.location ‡∏Ñ‡∏∑‡∏≠ '‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏'; "
        "logistics.hospital_destination ‡∏Ñ‡∏∑‡∏≠ '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á'."
    )


def run_ems_extractor(raw_report: str) -> tuple[dict, str]:
    """
    ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LLM ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EMS ‡∏à‡∏≤‡∏Å raw_report
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ (data_dict_after_post_process, human_readable_text)
    """
    load_dotenv()
    api_key = os.getenv("OPENAI_API_KEY")

    if not api_key:
        raise RuntimeError("OPENAI_API_KEY ‡πÑ‡∏°‡πà‡∏û‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env ‡∏´‡∏£‡∏∑‡∏≠ environment")

    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ Model ‡πÄ‡∏õ‡πá‡∏ô gpt-4o-mini
    client = OpenAI(api_key=api_key)

    system_msg = build_system_prompt_for_ems()
    user_msg = (
        f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏π‡πâ‡∏†‡∏±‡∏¢ (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏¥‡∏ö):\n{raw_report}\n"
        f"‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {datetime.now().astimezone().isoformat()}"
    )

    resp = client.chat.completions.create(
        model="gpt-5-mini",
        messages=[
            {"role": "system", "content": system_msg},
            {"role": "user", "content": user_msg}
        ],
        response_format={"type": "json_object"}
    )

    text = resp.choices[0].message.content
    try:
        data = json.loads(text)
    except Exception as e:
        # ‡∏™‡πà‡∏á raw ‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÉ‡∏ô UI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏µ‡∏ö‡∏±‡πä‡∏Å
        raise RuntimeError(f"LLM ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON: {e}\nRAW: {text[:500]}...")

    # ‡πÉ‡∏ä‡πâ post-process ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
    data = normalize_after_llm(data, raw_report)
    human_text = to_human_text(data)
    return data, human_text


def join_transcripts(results: list[dict]) -> str:
    """
    ‡∏£‡∏ß‡∏° transcripts ‡∏´‡∏•‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å STT ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    """
    parts = []
    for r in results:
        t = (r.get("transcript") or "").strip()
        if t:
            parts.append(t)
    return " ".join(parts).strip()

# ===== Helper: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard =====
def send_to_dashboard():
    data = st.session_state.get("ems_data")
    if not data:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EMS ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ Dashboard")
        return

    # ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô session ‡∏´‡∏•‡∏∏‡∏î
    out_dir = Path("outputs")
    out_dir.mkdir(parents=True, exist_ok=True)
    latest_path = out_dir / "latest_case.json"
    latest_path.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")

    # ‡πÅ‡∏ä‡∏£‡πå‡∏ú‡πà‡∏≤‡∏ô session_state
    st.session_state["dashboard_payload"] = data
    st.session_state["dashboard_latest_path"] = str(latest_path.resolve())
    
    st.success("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Dashboard ‡πÅ‡∏•‡πâ‡∏ß ‚úÖ ‚Äî ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ 'Dashboard' ‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ö‡∏ã‡πâ‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")


def clear_results():
    """Clear all results from session state"""
    st.session_state.stt_results = None
    st.session_state.raw_transcript = ""
    st.session_state.processing_time = 0
    st.session_state.ems_data = None
    st.session_state.human_text = ""
    st.session_state.current_file_info = None


# -------------------------
# Main App
# -------------------------
def main():
    # Initialize session state
    init_session_state()
    
    st.markdown("""
    <div class="main-header">
        <h1>EMS Speech-to-Text & Extractor</h1>
        <p>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‚Üí ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Üí ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EMS (JSON + ‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß)</p>
    </div>
    """, unsafe_allow_html=True)

    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ STT ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ
    if not st.session_state.is_initialized:
        if not initialize_stt_client():
            return

    # ========================
    # STEP 1: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    # ========================
    st.markdown('<div class="step-header">üìÅ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á</div>', unsafe_allow_html=True)
    
    uploaded_file = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•",
        type=['wav', 'mp3', 'flac', 'webm', 'ogg', 'm4a'],
        help="‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: WAV, MP3, FLAC, WebM, OGG, M4A"
    )

    if st.session_state.current_file_info:
        if st.button("üóëÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà (‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå)", help="‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"):
            clear_results()
            st.rerun()

    # ========================
    # STEP 2: ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (STT)
    # ========================
    if uploaded_file:
        current_file_info = {
            "name": uploaded_file.name,
            "size": len(uploaded_file.getvalue())
        }
        uploaded_file.seek(0)
        
        is_new_file = (st.session_state.current_file_info != current_file_info)
        
        if is_new_file:
            clear_results()
            st.session_state.current_file_info = current_file_info

        st.markdown('<div class="step-header">üé§ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (STT)</div>', unsafe_allow_html=True)
        
        st.info(f"üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: **{uploaded_file.name}** | ‡∏Ç‡∏ô‡∏≤‡∏î: **{current_file_info['size']:,}** ‡πÑ‡∏ö‡∏ï‡πå")

        if st.button("‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", type="primary", use_container_width=True, disabled=st.session_state.stt_results is not None):
            audio_bytes = uploaded_file.read()
            effective_audio_bytes = audio_bytes
            effective_encoding = "WEBM_OPUS"
            effective_sr = 16000

            try:
                if st.session_state.stt_client.is_m4a(audio_bytes, uploaded_file.name):
                    with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå M4A ‡πÄ‡∏õ‡πá‡∏ô WAV..."):
                        effective_audio_bytes = st.session_state.stt_client.convert_m4a_to_wav(
                            audio_bytes, target_sample_rate=16000
                        )
                        effective_encoding = "LINEAR16"
                        effective_sr = 16000
            except Exception as e:
                st.error(f"‚ùå ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå M4A ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
                return

            start_time = time.time()
            with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà..."):
                result = st.session_state.stt_client.transcribe_audio(
                    audio_content=effective_audio_bytes,
                    language_code="th-TH",
                    enable_automatic_punctuation=True,
                    enable_word_time_offsets=False,
                    sample_rate=effective_sr,
                    audio_encoding=effective_encoding
                )
            processing_time = time.time() - start_time

            if not result.get('success'):
                st.error(f"‚ùå ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.get('error', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')}")
                return

            st.session_state.stt_results = result
            st.session_state.raw_transcript = join_transcripts(result['results'])
            st.session_state.processing_time = processing_time
            
            st.rerun()

        if st.session_state.stt_results:
            st.success(f"‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {st.session_state.processing_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            
            for i, res in enumerate(st.session_state.stt_results['results'], 1):
                st.markdown(f"""
                <div class="result-card">
                    <h4>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà #{i}</h4>
                    <p><strong>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡πÑ‡∏î‡πâ:</strong> {res.get('transcript','')}</p>
                    <p><strong style="color:#525f7f;">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à (Confidence):</strong> {res.get('confidence',0):.1%}</p>
                </div>
                """, unsafe_allow_html=True)

            st.markdown("<div class='subtle'>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ EMS Extractor:</div>", unsafe_allow_html=True)
            st.code(st.session_state.raw_transcript, language='text')

            # ========================
            # STEP 3: ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EMS
            # ========================
            st.markdown('<div class="step-header">üß† ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EMS (LLM)</div>', unsafe_allow_html=True)
            
            if not st.session_state.raw_transcript:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å STT ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EMS ‡πÑ‡∏î‡πâ")
                return

            if st.button("ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EMS", type="primary", use_container_width=True, disabled=st.session_state.ems_data is not None):
                try:
                    with st.spinner("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô..."):
                        data, human_text = run_ems_extractor(st.session_state.raw_transcript)
                        
                    st.session_state.ems_data = data
                    st.session_state.human_text = human_text
                    
                    st.rerun()
                    
                except Exception as e:
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
                    return

        # ========================
        # STEP 4: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        # ========================
        if st.session_state.ems_data:
            st.markdown('<div class="step-header">üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>', unsafe_allow_html=True)
            
            tab1, tab2 = st.tabs(["üìÑ ‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß", "üîç JSON (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö)"])

            with tab1:
                st.markdown("**‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (SBAR/MIST style):**")
                st.text_area("‡∏™‡∏£‡∏∏‡∏õ", st.session_state.human_text, height=250, disabled=True)

            with tab2:
                st.markdown("**JSON (‡∏´‡∏•‡∏±‡∏á post-process):**")
                st.json(st.session_state.ems_data)

            st.divider()
            
            ts = datetime.now().strftime("%Y%m%d_%H%M%S")
            json_bytes = json.dumps(st.session_state.ems_data, ensure_ascii=False, indent=2).encode("utf-8")
            txt_bytes = st.session_state.human_text.encode("utf-8")

            col1, col2 = st.columns(2)
            with col1:
                st.download_button(
                    "‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î JSON",
                    data=json_bytes,
                    file_name=f"case_{ts}.json",
                    mime="application/json",
                    use_container_width=True
                )
            with col2:
                st.download_button(
                    "‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î TXT (‡∏™‡∏£‡∏∏‡∏õ)",
                    data=txt_bytes,
                    file_name=f"case_{ts}.txt",
                    mime="text/plain",
                    use_container_width=True
                )
            
            out_dir = Path("outputs")
            try:
                out_dir.mkdir(parents=True, exist_ok=True)
                (out_dir / f"case_{ts}.json").write_bytes(json_bytes)
                st.caption(f"‚úì ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ã‡πâ‡∏≥‡∏•‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `./outputs` ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (case_{ts}.json)")
            except Exception as io_err:
                st.caption(f"‚úó ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `./outputs`: {io_err}")
            
            st.markdown("---")
            if st.button("üìä ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏µ‡πà Dashboard", type="primary", use_container_width=True):
                send_to_dashboard()

    # ========================
    # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• (‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤)
    # ========================
    st.divider()
    
    # --- FIXED SECTION ---
    with st.expander("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", expanded=False):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML string ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        stt_status_html = "<span style='color:green;'>‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß</span>" if st.session_state.is_initialized else "<span style='color:red;'>‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</span>"
        audio_status_html = "<span style='color:green;'>‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß</span>" if st.session_state.current_file_info else "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"
        stt_result_html = "<span style='color:green;'>‚úÖ ‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</span>" if st.session_state.stt_results else "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"
        ems_data_html = "<span style='color:green;'>‚úÖ ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß</span>" if st.session_state.ems_data else "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        st.markdown(f"**STT Client:** {stt_status_html}", unsafe_allow_html=True)
        st.markdown(f"**‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á:** {audio_status_html}", unsafe_allow_html=True)
        st.markdown(f"**‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå STT:** {stt_result_html}", unsafe_allow_html=True)
        st.markdown(f"**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EMS:** {ems_data_html}", unsafe_allow_html=True)
    # --- END OF FIXED SECTION ---

    st.markdown("""
    <div style="text-align: center; color: #8898aa; margin-top: 2rem;">
        <p><strong>EMS Speech-to-Text & Extractor</strong> | Version 2025</p>
    </div>
    """, unsafe_allow_html=True)


if __name__ == "__main__":
    main()